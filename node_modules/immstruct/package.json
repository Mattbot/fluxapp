{
  "name": "immstruct",
  "version": "1.4.0",
  "description": "Immutable data structure for top-to-bottom properties in component based libraries like React",
  "main": "index.js",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "mocha -R spec tests/*_test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/omniscientjs/immstruct.git"
  },
  "keywords": [
    "immutable",
    "react",
    "structure",
    "properties"
  ],
  "author": {
    "name": "Mikael Brevik, @torgeir"
  },
  "contributors": [
    {
      "name": "Mikael Brevik"
    },
    {
      "name": "@torgeir"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/omniscientjs/immstruct/issues"
  },
  "homepage": "https://github.com/omniscientjs/immstruct",
  "dependencies": {
    "eventemitter3": "^0.1.6",
    "immutable": "^3.0.2",
    "inherits": "^2.0.1"
  },
  "devDependencies": {
    "browserify": "^8.1.3",
    "browserify-shim": "^3.8.2",
    "chai": "^1.10.0",
    "derequire": "^1.2.1",
    "mocha": "^2.0.1",
    "uglify-js": "^2.4.16"
  },
  "browserify-shim": {
    "immutable": "global:Immutable"
  },
  "readme": "Immstruct [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n======\n\nA wrapper for [Immutable.js](https://github.com/facebook/immutable-js/tree/master/contrib/cursor) to easily create cursors that notify when they\nare updated. Handy for use with immutable pure components for views,\nlike with [Omniscient](https://github.com/omniscientjs/omniscient) or [React.js](https://github.com/facebook/react).\n\n## Usage\n\n```js\n// someFile.js\nvar immstruct = require('immstruct');\nvar structure = immstruct('myKey', { a: { b: { c: 1 } } });\n\n// Use event `swap` or `next-animation-frame`\nstructure.on('swap', function (newStructure, oldStructure) {\n  console.log('Subpart of structure swapped.');\n  console.log('New structure:', newStructure.toJSON());\n\n  // e.g. with usage with React\n  // React.render(App({ cursor: structure.cursor() }), document.body);\n});\n\nvar cursor = structure.cursor(['a', 'b', 'c']);\n\n// Update the value at the cursor. As cursors are immutable,\n// this returns a new cursor that points to the new data\nvar newCursor = cursor.update(function (x) {\n  return x + 1;\n});\n\n// The value of the old `cursor` to is still `1`\nconsole.log(cursor.deref()); //=> 1\n\n// `newCursor` points to the new data\nconsole.log(newCursor.deref()); //=> 2\n```\n\n\n```js\n// anotherFile.js\nvar immstruct = require('immstruct');\nvar structure = immstruct('myKey');\n\nvar cursor = structure.cursor(['a', 'b', 'c']);\n\nvar updatedCursor = cursor.update(function (x) { // triggers `swap` in somefile.js\n  return x + 1;\n});\n\nconsole.log(updatedCursor.deref()); //=> 3\n```\n\n## References\n\nWhile Immutable.js cursors are immutable, Immstruct lets you create references\nto a piece of data from where cursors will always be fresh.\n\n```js\n\nvar structure = immstruct({ 'foo': 'bar' });\nvar ref = structure.reference('foo');\n\nconsole.log(ref.cursor().deref()) //=> 'bar'\n\nvar oldCursor = structure.cursor('foo');\nconsole.log(oldCursor.deref()) //=> 'bar'\n\nvar newCursor = structure.cursor('foo').update(function () { return 'updated'; });\nconsole.log(newCursor.deref()) //=> 'updated'\n\nassert(oldCursor !== newCursor);\n\n// You don't need to manage and track fresh/stale cursors.\n// A reference cursor will do it for you.\nconsole.log(ref.cursor().deref()) //=> 'updated'\n```\n\nUpdating a cursor created from a reference will also update the underlying structure.\n\nThis offers benefits similar to that of [Om](https://github.com/omcljs/om/wiki/Advanced-Tutorial#reference-cursors)'s `reference cursors`, where\n[React.js](http://facebook.github.io/react/) or [Omniscient](https://github.com/omniscientjs/omniscient/) components can observe pieces of application\nstate without it being passed as cursors in props from their parent components.\n\nReferences also allow for listeners that fire when their path or the path of sub-cursors change:\n\n```js\nvar structure = immstruct({\n  someBox: { message: 'Hello World!' }\n});\nvar ref = structure.reference(['someBox']);\n\nvar unobserve = ref.observe(function () {\n  // Called when data the path 'someBox' is changed.\n  // Also called when the data at ['someBox', 'message'] is changed.\n});\n\n// Update the data using the ref\nref.cursor().update(function () { return 'updated'; });\n\n// Update the data using the initial structure\nstructure.cursor(['someBox', 'message']).update(function () { return 'updated again'; });\n\n// Remove the listener\nunobserve();\n```\n\n### Notes\n\nParents' change listeners are also called when sub-cursors are changed.\n\nCursors created from references are still immutable. If you keep a cursor from\na `var cursor = reference.cursor()` around, the `cursor` will still point to the data\nat time of cursor creation. Updating it may rewrite newer information.\n\n## Usage Undo/Redo\n\n```js\nvar structure = immstruct.withHistory({ 'foo': 'bar' });\nconsole.log(structure.cursor('foo').deref()); //=> 'bar'\n\nstructure.cursor('foo').update(function () { return 'hello'; });\nconsole.log(structure.cursor('foo').deref()); //=> 'hello'\n\nstructure.undo();\nconsole.log(structure.cursor('foo').deref()); //=> 'bar'\n\nstructure.redo();\nconsole.log(structure.cursor('foo').deref()); //=> 'hello'\n\n```\n\n## API\n\n### `immstruct([name : String][jsStructure : Object]) : Structure`\n\nCreates or retrieves [structures](#structure--eventemitter).\n\nSee examples:\n\n```js\nvar structure = immstruct('someKey', { some: 'jsObject' })\n// Creates new structure with someKey\n```\n\n\n```js\nvar structure = immstruct('someKey')\n// Get's the structure named `someKey`.\n```\n\n**Note:** if someKey doesn't exist, an empty structure is created\n\n```js\nvar structure = immstruct({ some: 'jsObject' })\nvar randomGeneratedKey = structure.key;\n// Creates a new structure with random key\n// Used if key is not necessary\n```\n\n\n```js\nvar structure = immstruct()\nvar randomGeneratedKey = structure.key;\n// Create new empty structure with random key\n```\n\nYou can also create your own instance of Immstruct, isolating the\ndifferent instances of structures:\n\n```js\nvar localImmstruct = new immstruct.Immstruct()\nvar structure = localImmstruct.get('someKey', { my: 'object' });\n```\n\n#### Methods and accessers\n\n##### `immstruct#clear()`\n\nRemoves all instances.\n\n##### `immstruct#remove(name : String) : bool`\n\nRemoves specified instance. Returns result of the delete operation.\n\n##### `immstruct#instances : Structure[]`\n\nAccess the instances internals.\n\n### `Structure : EventEmitter`\n\nYou can create a bare-bone `Structure` without using the instance management\nof the `immstruct` function call. Require the structure directly:\n\n```js\nvar Structure = require('immstruct/structure');\nvar s = new Structure({\n  key: 'foo', // default random string\n  data: someObject, // default empty object\n  withHistory: true // default `false`\n})\n```\n\nA structure is the a wrapped Immutable.js instance. You can access the inner\nimmutable data by calling `myStructure.current`. A structure is an\nevent emitter. See [events](#structure-events)\n\n#### `Structure#key : String`\nReturns the access key for structure. Can be used to get the instance by using\n`immstruct(givenKey)`. If you don't use a key while creating the structure with\nimmstruct, a random key will be generated. In that case, you can use this\nproperty to retrieve the used key.\n\n#### `Structure#current : Immutable.js`\n\nReturns the internal Immutable.js structure.\n\nSee [Immutable.js](https://github.com/facebook/immutable-js).\n\n#### `Structure#cursor([path : Array<string>]) : Cursor (Immutable.js)`\n\nCreates a cursor to a part of a Immutable.js structure based on a array\nof paths. If no path is given the top node is used.\n\nExample:\n```js\nvar cursor = structure.cursor(['some', 'path', 'here']);\ncursor.get('subPath').update(updateFunction);\n```\n\nSee [Immutable.js cursors](https://github.com/facebook/immutable-js/tree/master/contrib/cursor).\n\n**Note:** You **probably never** want to use use `structure.current.cursor()`\ndirectly, as this won't add event handlers for when the cursor is updated.\n\n#### `Structure#reference([path : Array<string>]) : Reference`\n\nCreates a [reference cursor](#reference-cursors) for having access to\ncursors which are always up to date with the latest structure.\n\nExample:\n```js\nvar ref = structure.reference(['some', 'path', 'here']);\nvar cursor = ref.cursor();\n```\n\n##### Reference#cursor([path : Array<string>]) : Cursor (Immutable.js)\n\nCreates a (sub-)cursor from the reference. If path is provided, a sub-cursor\nis created, without a path, the latest and greatest cursor of the path\nprovided to the reference is created.\n\n##### Reference#observe([eventType : String, ]listener : Function) : unobserve : Function\n\nAdd a listener for when the data the cursor (or any sub-cursors) in the reference\nchanges.\n\nOptional `eventType` will define what type of change to listen for; `swap`, `add`, `change` and `delete.\nSame as [Structure Events as defined below](#structure-events). If no event is passed, `swap` is used, which\nmeans every change.\n\nReturns a function to remove observer.\n\n##### Reference#unobserveAll()\n\nRemove all observers for this reference.\n\n##### Reference#destroy()\n\nClean up all, remove all listeners and unset all loose variables to clear up\nmemory.\n\n#### `Structure#forceHasSwapped() : void`\n\nForce triggers the swap events. Useful when you want to force re-render\ndesign components or view layers.\n\n\n### With History\n\nInstantiate structure using `withHistory` instead of default constructor:\n\n```\nvar structure = immstruct.withHistory({ 'foo': 'bar' });\n```\n\nSame signature as normal constructor:\n\n```\nimmstruct.withHistory([name : String][jsStructure : Object]) : Structure\n```\n\n#### `Structure#undo(steps: int) : Structure`\n\nUndo number of steps. Step defaults to one step. Returns structure.\n\n#### `Structure#undoUntil(obj: Structure) : Structure`\n\nUndo number until structure passed as argument. Returns structure.\n\n#### `Structure#redo(steps: int) : Structure`\n\nRedo number of steps. Step defaults to one step. Returns structure.\n\n### Structure Events\n\nA Structure object is an event emitter and emits the following events:\n\n* `swap`: Emitted when cursor is updated (new information is set). Emits no values. One use case for this is to re-render design components. Callback is passed arguments: `newStructure`, `oldStructure`.\n* `next-animation-frame`: Same as `swap`, but only emitted on animation frame. Could use with many render updates and better performance. Callback is passed arguments: `newStructure`, `oldStructure`.\n* `change`: Emitted when data/value is updated and it existed before. Emits values: `path`, `newValue` and `oldValue`.\n* `delete`: Emitted when data/value is removed. Emits value: `path` and `removedValue`.\n* `add`: Emitted when new data/value is added. Emits value: `path` and `newValue`.\n\n**NOTE:** If you update cursors via `Cursor.update` or `Cursor.set`, and if the underlying Immutable collection is not inherently changed, `swap` and `changed` events will not be emitted, neither will the history (if any) be applied.\n\n[See tests for event examples](./tests/structure_test.js)\n\n[npm-url]: https://npmjs.org/package/immstruct\n[npm-image]: http://img.shields.io/npm/v/immstruct.svg?style=flat\n\n[travis-url]: http://travis-ci.org/omniscientjs/immstruct\n[travis-image]: http://img.shields.io/travis/omniscientjs/immstruct.svg?style=flat\n\n[depstat-url]: https://gemnasium.com/omniscientjs/immstruct\n[depstat-image]: http://img.shields.io/gemnasium/omniscientjs/immstruct.svg?style=flat\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n",
  "readmeFilename": "README.md",
  "_id": "immstruct@1.4.0",
  "dist": {
    "shasum": "9501cff04978f305102f95305b9ea84dd0eb8649"
  },
  "_from": "immstruct@",
  "_resolved": "https://registry.npmjs.org/immstruct/-/immstruct-1.4.0.tgz"
}
